Q: Se citesc de la tastatura N si M. De pe urmatoarele linii se citesc M numere naturale, reprezentand elementele matricei.
Programul va afisa DA in cazul in care Max poate parcurge in spirala toate elementele matricei, iar NU in caz contrar.
Max se poate deplasa din casuta in care se afla fie spre stanga, fie spre dreapta, fie in sus sau in jos.
Fiecare casuta are o valoare, daca casuta in care Max vrea sa se deplaseze are valoarea mai mare fata de casuta din care vine, el poate continua sa parcurga matricea,
altfel ne oprim.
#include <iostream>
using namespace std;
int main(void){
    int mat[51][51], m,n, k = 1, l = 1, i, counter = 0, counter2 = 0, counter3 = 1;
    bool notOk = false;
    cin >> n >> m;
    int total = m*n;
    int last_col = m, last_row = n;
    
    for (int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= m; j++)
        {
            cin >> mat[i][j];
        }
    }
    
    while (counter3 < total)
    {
        // Primul rand
        for ( i = l; i < last_col+counter-counter2; i++)
        {
            if (mat[k][i-counter+counter2] >= mat[k][i+1-counter+counter2])
            {
                notOk = true;
                cout << "PR: " << " Mat1: " << mat[k][i-counter+counter2] << " Mat2: " << mat[k][i+1-counter+counter2] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
                break;
                
            }
            counter3++;
            cout << "PR: " << " Mat1: " << mat[k][i-counter+counter2] << " Mat2: " << mat[k][i+1-counter+counter2] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
        }
        if (notOk == true)
        {
            break;
        }
        // Ultima coloana
        for ( i = k; i < last_row; i++)
        {
            if (mat[i][last_col] >= mat[i+1][last_col])
            {
                notOk = true;
                cout << "UC: " << " Mat1: " << mat[i][last_col] << " Mat2: " << mat[i+1][last_col] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
                break;
                
            }
            counter3++;
            cout << "UC: " << " Mat1: " << mat[i][last_col] << " Mat2: " << mat[i+1][last_col] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
        }
        if (notOk == true)
        {
            break;
        }
        k++;
        // Randul de jos
        if ( k <= last_row)
        {
            for (i = last_col; i > l; i--)
            {
                if (mat[last_row][i] >= mat[last_row][i-1])
                {
                    notOk = true;
                    cout << "RJ: " << " Mat1: " << mat[last_row][i] << " Mat2: " << mat[last_row][i-1] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
                    break;
                }
                counter3++;
                cout << "RJ: " << " Mat1: " << mat[last_row][i] << " Mat2: " << mat[last_row][i-1] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
            }
            if (notOk == true)
            {
                break;
            }
            last_col--; // schimbat
        }
        // Prima coloana
        if ( l <= last_col)
        {
            for( i = last_row; i> k; i--)
            {
                if (mat[i][l] >= mat[i-1][l])
                {
                    notOk = true;
                    cout << "PC: " << " Mat1: " << mat[i][l] << " Mat2: " << mat[i-1][l] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
                    break;
                }
                counter3++;
                cout << "PC: " << " Mat1: " << mat[i][l] << " Mat2: " << mat[i-1][l] << " Counter3: " << counter3 << " notOK: " << notOk << "\n";
            }
            if (notOk == true)
            {
                break;
            }
            l++;
            last_row--;
        }
        counter++;
        if ( counter % 2 == 0)
        {
            counter2++;
        }
    }
    if (notOk == true)
    {
        cout << "NU";
    }
    else
    {
        cout << "DA";
    }
}

Q: Return the biggest sum from a submatrix in a given matrix
#include <iostream>
using namespace std;
int main(void){
    int mat[51][51], linii, coloane, sp[51][51], sum= -3001, aux;
    
    cin >> linii >> coloane;
    // Add elements to the matrix
    for (int i = 1; i <= linii; i++){
        for (int j = 1; j <= coloane; j++){  
            cin >> mat[i][j];
            sp[i][j] = mat[i][j] + sp[i-1][j] + sp[i][j-1] - sp[i-1][j-1];
        }
    }
    // Calculate all the submatrices sum and save it to sum.
    for (int i = 1; i <= linii; i++){
        for (int j = 1; j <= coloane; j++){
            for (int q = i; q <= linii; q++){
                for(int r = j; r <= coloane; r++){
                    aux = sp[q][r] - sp[i-1][r] - sp[q][j-1] + sp[i-1][j-1];
                    if (sum <= aux){
                    sum = aux;
                    }
                }
            }
        }
    }
    // Check which number is the biggest in the matrix in case of negative numbers
    aux = mat[1][1];
    for (int i = 1; i <= linii; i++){
        for (int j = 1; j <= coloane; j++){
            if (mat[i][j] > aux){
                aux = mat[i][j];
            }
        }
    }
    // If the number is negative return aux
    // else return sum
    if ( aux >= 0 ){
        cout << sum;
    }else{
        cout << aux;
    }

}
_____________________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________________

Q: 
#include <iostream>
using namespace std;
int main(void){
    
    int m[101][101], lin, col, g, i1, j1, i2, j2, q = 1, total = 0;
    
    cin >> lin >> col;
    
    for ( int i = 1; i <= lin; i++){
        for ( int j = 1; j <= col; j++){
            cin >> m[i][j];
        }
    }
    
    cin >> g;
    while ( q <= g ){
        cin >> i1 >> j1 >> i2 >> j2;
        
        for ( int i = i1; i <= i2; i++){
            for ( int j = j1; j <= j2; j++){
                total += m[i][j];
            }
        }
        cout << total << endl;
        total = 0;
        q++;
    }
}
_____________________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________________

Q: In a given matrix remove the line k from it.
#include <iostream>
using namespace std;

int main(void)
{
   int i, j, coloane, linii, k, m[401][401];
   
   cin >> linii >> coloane >> k;
   
   for(i = 1; i <= linii; i++){
       for (j = 1; j <= coloane; j++){
           cin >> m[i][j];
       }
   }
   
   for(i = 1; i <= linii; i++){
       for(j = 1; j <= coloane; j++){
            if (j < k){
               cout << m[i][j] << " ";
            }else if (j > k){
                cout << m[i][j] << " ";
            }
        }
       cout << endl;
   }
}
_____________________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________________
